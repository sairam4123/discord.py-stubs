- case: bot_custom_context
  main: |
    import random
    from typing import TYPE_CHECKING, Any, Type, TypeVar, Union, cast, overload

    import discord
    from discord.ext import commands

    if TYPE_CHECKING:
        Bot = commands.Bot['MyContext']
    else:
        Bot = commands.Bot


    CT = TypeVar('CT', bound='MyContext')
    OT = TypeVar('OT', bound=commands.Context)


    class MyContext(commands.Context):
        async def tick(self, value: int) -> None:
            emoji = '\N{WHITE HEAVY CHECK MARK}' if value else '\N{CROSS MARK}'
            try:
                await self.message.add_reaction(emoji)
            except discord.HTTPException:
                pass


    class MyBot(Bot):
        @overload
        async def get_context(self, message: discord.Message) -> MyContext:
            ...

        @overload
        async def get_context(self, message: discord.Message, *, cls: Type[OT]) -> OT:
            ...

        async def get_context(
            self, message: discord.Message, *, cls: Type[OT] = cast(Any, MyContext)
        ) -> Union[MyContext, OT]:
            return await super().get_context(message, cls=cls)


    bot = MyBot(command_prefix='!')


    @bot.command()
    async def guess(ctx: MyContext, number: int) -> None:
        """ Guess a random number from 1 to 6. """
        value = random.randint(1, 6)
        await ctx.tick(number == value)


    bot.run('your token here')

- case: bot_basic
  main: |
    import random

    import discord
    from discord.ext import commands

    description = '''An example bot to showcase the discord.ext.commands extension
    module.
    There are a number of utility commands being showcased here.'''
    bot = commands.Bot(command_prefix='?', description=description)

    reveal_type(bot)  # N: Revealed type is 'discord.ext.commands.bot.Bot[discord.ext.commands.context.Context]'


    @bot.event
    async def on_ready() -> None:
        print('Logged in as')
        print(bot.user.name)
        print(bot.user.id)
        print('------')


    @bot.command()
    async def add(ctx: commands.Context, left: int, right: int) -> None:
        """Adds two numbers together."""
        await ctx.send(left + right)


    @bot.command()
    async def roll(ctx: commands.Context, dice: str) -> None:
        """Rolls a dice in NdN format."""
        try:
            rolls, limit = map(int, dice.split('d'))
        except Exception:
            await ctx.send('Format has to be in NdN!')
            return

        result = ', '.join(str(random.randint(1, limit)) for r in range(rolls))
        await ctx.send(result)


    @bot.command(description='For when you wanna settle the score some other way')
    async def choose(ctx: commands.Context, *choices: str) -> None:
        """Chooses between multiple choices."""
        await ctx.send(random.choice(choices))


    @bot.command()
    async def repeat(
        ctx: commands.Context, times: int, content: str = 'repeating...'
    ) -> None:
        """Repeats a message multiple times."""
        for i in range(times):
            await ctx.send(content)


    @bot.command()
    async def joined(ctx: commands.Context, member: discord.Member) -> None:
        """Says when a member joined."""
        await ctx.send(f'{member.name} joined in {member.joined_at}')


    @bot.group()
    async def cool(ctx: commands.Context) -> None:
        """Says if a user is cool.
        In reality this just checks if a subcommand is being invoked.
        """
        if ctx.invoked_subcommand is None:
            await ctx.send('No, {ctx.subcommand_passed} is not cool')


    @cool.command(name='bot')
    async def _bot(ctx: commands.Context) -> None:
        """Is the bot cool?"""
        await ctx.send('Yes, the bot is cool.')


    bot.run('token')
- case: bot_intents
  main: |
    import random
    from typing import TYPE_CHECKING, Any, Type, TypeVar, Union, cast, overload

    import discord
    from discord.ext import commands

    if TYPE_CHECKING:
        Bot = commands.Bot['MyContext']
    else:
        Bot = commands.Bot


    CT = TypeVar('CT', bound='MyContext')
    OT = TypeVar('OT', bound=commands.Context)


    class MyContext(commands.Context):
        async def tick(self, value: int) -> None:
            emoji = '\N{WHITE HEAVY CHECK MARK}' if value else '\N{CROSS MARK}'
            try:
                await self.message.add_reaction(emoji)
            except discord.HTTPException:
                pass


    class MyBot(Bot):
        @overload
        async def get_context(self, message: discord.Message) -> MyContext:
            ...

        @overload
        async def get_context(self, message: discord.Message, *, cls: Type[OT]) -> OT:
            ...

        async def get_context(
            self, message: discord.Message, *, cls: Type[OT] = cast(Any, MyContext)
        ) -> Union[MyContext, OT]:
            return await super().get_context(message, cls=cls)


    bot = MyBot(command_prefix='!', intents=discord.Intents.all())


    @bot.command()
    async def guess(ctx: MyContext, number: int) -> None:
        """ Guess a random number from 1 to 6. """
        value = random.randint(1, 6)
        await ctx.tick(number == value)


    bot.run('your token here')
